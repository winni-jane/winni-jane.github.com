一、typedef的用法

typedef常用来定义一个标识符及关键字的别名，它是语言编译过程的一部分，但它并不实际分配内存空间.
typedef可以增强程序的可读性，以及标识符的灵活性，但它也有“非直观性”等缺点。

二、宏定义 #define的用法

#define为一宏定义语句，通常用它来定义常量(包括无参量与带参量)，以及用来实现那些“表面似和善、背后一长串”的宏，它本身并不在编译过程中进行，而是在这之前(预处理过程)就已经完成了，但也因此难以发现潜在的错误及其它代码维护问题。

//带参宏 宏可以传参数 没有类型
#define ADD(a,b) ((a) + (b))

//将多行代码 连接成一行 用 '\' 连字符 来连接  使其成为一行
#define MyMIN(a,b) if(a < b){       \
                    printf("a");    \
                 }else{          \
                    printf("b"); \
                 }


 #define是预处理指令，在编译预处理时进行简单的替换，不作正确性检查，不管含义是否正确照样带入，
      只有在编译已被展开的源程序时才会发现可能的错误并报错
 
 typedef是在编译时处理的。它在自己的作用域内给一个已经存在的类型一个别名
 
 #define 不是语句 不要在行末加分号，否则 会连分号一块置换

三、条件编译

条件编译 预处理语句

#if 值
    语句块;
 #endif
 注：在预处理阶段，如果值为真，那么执行语句块里面的内容，如果值为假 就不执行(相当于注释的内容)
 
 #if 值
 语句块1;
 #else
 语句块2;
 #endif
 注:在预处理阶段如果 #if 后面的值 为真 就执行语句块1;否则执行语句块2;

四、结构体


```

特点:
    结构体是不同数据类型变量的集合
 要求:
    先定义  后使用
 eg:
 struct 结构体名{
    成员变量1;//成员变量以‘;‘结束
    成员变量2;
    成员变量3;
 ……
 };//必须以‘;’结束


 struct Student xiaohong;//定义一个结构体变量
    //在内存里面开辟存储空间
    
    //对结构体变量xiaohong赋值
    xiaohong.num = 4;//结构体变量名.成员变量名

//结构体可以完全初始化
    struct Student x = {11,"xiaohuang",99};

//将type 重新命名
    typedef struct Student XXX;
```

 五、结构体数组


```
//定义一个结构体数组
struct stu{
    int num;
    char name[50];
    char sex[30];
    float score;
};
//定义一个结构体数组 并且初始化
    struct stu Student[5] = {
        {101,"xiaoming","Male",99},
        {102,"xiaohong","Female",88},
        {103,"xiaohei","Male",32.5},
        {104,"xiaoyao","Male",87},
        {105,"dahuang","Female",55.5}
    };//'M' -> Male 'F' -> Female

```

六、enum

 enum 枚举名{
 成员变量1,   //默认第一个成员变量值为 0
 成员变量2
 };

七、malloc

char *p = (char *)malloc(100);

free(p);//堆空间用完以后 必须要释放


```

/*
     void *
     void * 不表示空，它是一个通配型的指针，泛型指针 可以赋给其他任意类型的指针，或者任意类型的指针 赋值给 void *
     注:
       void * 表示未确定类型的指针，因此可以指向任何的数据类型，更明确的说是指 申请内存空间的时候还不知道用用户用这段空间来干嘛，来存储什么类型（char ? int ? float?……）
     */

```


```
 int a = 1;
    void *p = &a;
    
    char c = '1';
    p = &c;
    
    int *x = p;
    char *y = p;
    
    //*p = 'A';//通配类型的指针 不能取 * 操作 因为取 * 之后 它不知道该取多大的类型存储空间


```

//如何动态的申请 4字节的存储空间
    int *pInt = (int *)malloc(sizeof(int));//


   int *p2 = (int *)malloc(100*sizeof(int));




