主要部分：

1.点击劫持（ClickJacking）。

2.跨站请求伪造（CSRF）。

3.跨站脚本攻击（XSS）。

4.注入（SQL inject）。

应用安全风险包括：

①注入：SQL注入、NoSQL注入（NoSQL为非关系型数据库）、OS注入（OS是操作系统执行的命令）、LDAP注入（LDAP是轻量目录访问协议）等。

②失效的身份认证：通过错误使用程序的身份认证和会话管理功能，攻击者能破译密码、密钥或会话令牌。或者冒充其他用户的身份。

③敏感数据泄漏：未加密的数据。

④XML外部实体：攻击者利用外部实体窃取使用URL文件处理器的内部文件和共享文件、监听内部扫描端口、执行远程代码和实施拒绝服务攻击。

⑤失效的访问控制：未对身份验证的用户实施恰当的访问控制，攻击者利用缺陷访问未授权的功能或数据。

⑥安全配置错误：不安全的默认配置、不完整的临时配置、开源云存储、错误HTTP标头配置和敏感数据信息的详细错误信息。

⑦跨站脚本：XSS攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。这些恶意网页程序通常是JavaScript，但实际上也可以包括Java，VBScript，ActiveX，Flash或者甚至是普通的HTML。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和cookie等各种内容。

⑧不安全的反序列化：序列化就是把对象转换成一种数据格式，如Json、XML等文本格式或二进制字节流格式，便于保存在内存、文件、数据库中或者在网络通信中进行传输。反序列化是序列化的逆过程，即由保存的文本格式或字节流格式还原成对象。如果应用代码允许接受不可信的序列化数据，在进行反序列化操作时，可能会产生反序列化漏洞，黑客可以利用它进行拒绝服务攻击、访问控制攻击和远程命令执行攻击。

⑨使用含有已知漏洞的组件

⑩不足的日志记录和监控。


2.1 跨站

cookie就是登录态，网络请求，浏览器会自动带上对应域名的cookie。

跨站条件：目标网站存在跨站漏洞，用户目标站就是登录未注销状态，用户使用相同浏览器打开恶意网站。

点击劫持：点击攻击者的链接或者按钮，调用特定网站的接口。 防御：使用X-FRAME-OPTIONS，top.location != self.location,referrer(referrer 属性可返回载入当前文档的文档的 URL。但是可以通过iframe实现referrer欺骗)

三、跨站请求伪造

跨站的本质：请求实质是成功的，只是不能读写返回数据。

       <img>  <script> <iframe>表单提交是可带cookie跨域的。

防CSRF：

①Cross-Origin Resource Sharing (CORS) ：Access-Control-Allow-Origin。该响应头用来记录可以访问该资源的域。在接收到服务端响应后，浏览器将会查看响应中是否包含Access-Control-Allow-Origin响应头。

②token验证。
③referrer验证。
④HTTP头中自定义属性。
⑤验证码。

四、跨站脚本攻击XSS

![](./picture/LK/01.png '描述')


1. Persistent XSS、Non-per-sistent XSS、DOM Based XSS。

2.XSS攻击成功后，攻击者能够对用户当前浏览的页面植入恶意脚本，通过恶意脚本，控制用户的浏览器。这些用以完成各种具体功能的恶意脚本，被称为“XSS Payload”。

危害：盗Cookie，改网页，挂马，重定向，蠕虫。

工具：AMack API / BeEF / XSS-Proxy / APPSCAN / AWVS / Burp Suite  

方法：看字符的渲染结果：'"<>/\&#%toneUp 


防止：字符的过滤如 <> "  '  &    
          js场景的：s = str.replace(/&/g, "&amp;"); s = s.replace(/</g, "&lt;"); s = s.replace(/>/g, "&gt;"); s = s.replace(/\"/g, "&quot;"); return s; 


XSS预防：

Cookie HMpOnly             X-XSS-Protection: 1        Content-Security-Policy    编码HTML Entity，HTML属性，SCRIPT,CSS,URL编码，场景过滤，特殊字符集。

五、SQL注入


防御：1、MySQL prepare() 预处理绑定参数。2、参数过滤。

六、服务器端请求伪造（SSRF）

校验URL合法性。


七、同形异义字攻击









