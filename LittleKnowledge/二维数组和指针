一、指针 本质是变量 存放的是地址。

1.   指针的类型（把指针名字去掉）

(1)int *ptr; //      int *
(2)char *ptr; //      char *
(3)int **ptr; //       int **
(4)int (*ptr)[3]; //       int(*)[3]
(5)int *(*ptr)[4]; //       int *(*)[4]

2. 指针指向的类型

从语法上看，只需把指针声明 语句中的指针名字和名字左边的指针声明符*去掉，剩下的就是指针所指向的类型。      
(1)int *ptr; //         int
(2)char *ptr; //          char
(3)int **ptr; //           int *
(4)int (*ptr)[3]; //           int()[3]
(5)int *(*ptr)[4]; //           int *()[4]

3.指针的值（指针所指向的内存区或地址）
指向这块内存区域的首地址。

4. 指针本身占了多大内存，只要用sizeof（指针的类型）测一下就知道了。

二、指针运算
int *ptr=a; ptr++

把指针ptr的值加上了sizeof（int）,在64位系统中就是4.

(*ptr)++;  单元的值加1

printf("sizeof(char *) = %ld\n",sizeof(char *));//8
在64位系统下 所有指针的类型 都是占 8 个字节 

value=array[0];//可以写成  value=*array;

value=array[3];//     value=*(array+3);

int *p[3];  //P 是一个由返回整型数据 的指针所组成的数组

int (*p)[3]; // P 是一个指向由整型数据组成的数组的指针

int **p;  //首先从 P 开始,先与*结合,说是 P 是一个指针,然后再与*结合, 说明指 针所指向的元素是指针,然后再与 int 结合, 说明该指针所指向的元素 是整型数据.

int p(int);  //从 P 处起,先与()结合,说明 P 是一个函数,然后进入()里分析,说明该 函数有一个整型变量的参数,然后再与外面的 int 结合, 说明函数的 返回值是一个整型数据

Int (*p)(int);  // 从 P 处开始,先与指针结合,说明 P 是一个指针,然后与()结合,
说明指针指向的是一个函数,然后再与()里的int 结合,说明函数有一个 int 型的参数,再与最外层的 int 结合,说明函数的 返回类型是整型,所以 P 是一个指向有一个整型参数且返回 类型为整型的函数的指针


三、选择排序


```
int main(int argc, const char * argv[])
{
    int a[5] = {5,2,3,4,1};//要求从小到大排序
    
    //选择排序从小到大排序模板
    
    for (int i = 0; i < 5-1; i++) {//控制轮次
        //内循环控制比较的过程
        for (int j = i+1; j < 5; j++) {
            if (a[i] > a[j]) {//a[i] < a[j]降序
                int tmp;
                tmp = a[i];
                a[i] = a[j];
                a[j] = tmp;
            }
        }
    }
    
    for (int i = 0; i < 5; i++) {
        printf("%d ",a[i]);
    }
    
  
    return 0;
}


```

四、冒泡排序


```
int main(int argc, const char * argv[])
{
    int a[5] = {5,4,3,2,1};
    for (int i = 0; i < 5-1; i++) {
        for (int j = 0; j < 5-1-i; j++) {
            if (a[j] > a[j+1]) {//a[j]<a[j+1]降序
                int tmp;
                tmp = a[j];
                a[j] = a[j+1];
                a[j+1] = tmp;
                
                //冒泡排序比较的过程
                sleep(2);
                for (int i = 0; i < 5; i++) {
                    printf("%d ",a[i]);
                }
                printf("\n");
            }
        }
    }
    
//    for (int i = 0; i < 5; i++) {
//        printf("%d\n",a[i]);
//    }

    
    return 0;
}

```

五、二维数组

二维数组的元素就是一个一维数组，元素个数:sizeof(b)/sizeof(b[0])

杨辉三角：

![](./picture/c/2.png '描述')


```
int main(int argc, const char * argv[])
{
    int i,j,a[11][11];	//定义i,j,a[11][11]为基本元素
	for(i=1;i<11;i++)
	{
		a[i][i]=1;      //对角线元素全为1
		a[i][1]=1;		//每行第一列元素全为1
	}
	for(i=3;i<11;i++)	//for循环范围从第三行开始到第10行
		for(j=2;j<=i-1;j++)	//for循环范围从第二列开始到该行行数减1列为止
			a[i][j]=a[i-1][j-1]+a[i-1][j];//第i行j列等于第i-1行j-1列的值加上第i-1行j列的值
    //i = 3 j =2 	a[3][2] = a[2][1]+a[2][2];
	for(i=1;i<11;i++)//
	{
		for(j=1;j<=i;j++)
			printf("%4d",a[i][j]);//通过上面两次for循环将二维数组a中的元素输出
		printf("\n");
	}

    return 0;
}

```

六、指针

获取CPU位数：


```
int getCPUBits(void){
    return (int)sizeof(int *) * 8;
    //8个字节 1字节 = 8 位
    //sizeof(int *) 返回当前指针的位数 == 内存地址名称的长度 == cpu的位数
}

```

 *p++    --> 同 *(p++)  因为按优先级来看， * 和 ++ 的操作是同级，他们都是从右往左运算，所以先++，再 取 * 操作


```
//传指针的方式
void changeToZero(int *p){
    *p = 0;
    printf("*p = %d\n",*p);
}

调用：changeToZero(&a);
```

七、交换变量


```
void swap(int *p,int *q);
void swap(int *p,int *q){
    int tmp;
    tmp = *p;
    *p = *q;
    *q = tmp;
}

int main(int argc, const char * argv[])
{
    int a = 3;
    int b = 5;
    
    printf("交换之前的值:a = %d b = %d\n",a,b);
    
    //swap(<#int *p#>, <#int *q#>)
     swap(&a, &b);
    
    printf("交换之后的值:a = %d b = %d\n",a,b);
    
    return 0;
}

```

swap函数总结：


```
 void swap1（int x,int y）
    {         //当传入的是整形变量的时候，在内存中另外分配了2个变量，复制了x，y的值
    int temp;          
    temp=x;
    x=y;
    y=temp;
    }//  swap1（x,y）；形参传值，不能交换，实际传过去是拷贝的一份，没改变主函数中x,y

void swap2（int *x,int *y）
    {
    int *temp;
    temp=x;
    x=y;
    y=temp;
    }//swap2（&x,&y）；不能交换，函数中只是地址交换了下，地址指向的内容没有交换

    void swap3（int *x,int *y）
    {
    int temp;	
    temp=*x;
    *x=*y;
    *y=temp;
    } //swap3（&x,&y）；能交换，地址指向的内容进行了交换

    void swap4（int a[],int b[]）
    {
    int temp;
    temp=a[0];
    a[0]=b[0];
    b[0]=temp;
    }  //swap4（&x,&y）；能交换，地址指向的内容进行交换

void swap5（int a[],int b[]）
    {
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
    }//swap5（&x,&y）；能交换，地址指向的内容进行交换  不规范的写法 最好不要这么写

void swap6(int *a, int *b)
   {
      if(*a  !=  *b)
      {
            *a = *a ^ *b;             //a = a ^ b ^ b;如果两个相同数异或，将会清0，因此要提前坐下判断
            *b = *a ^ *b;             //传统的赋值写法可适用于多种类型，其正确性也是毋庸置疑的。而异或写法除了整型之外，不 敢
            *a = *a ^ *b;             //保证其异或操作符在作用与浮点或自定义类型时还能正确的工作。
       }
   } //swap6（&x,&y）；能交换，地址指向的内容进行交换

void swap7(int **x, int **y)
   {
      int *temp;
       temp=*x;    
       *x=*y;
       *y=temp;
   }// swap7（&ppx,&ppy）；能交换，传入的是指针的地址，然后将指针的内容交换

```

八、数组和函数


```
void printArry(int *p,int n){//传的是数组的首地址
    
    //数组的写法
    for (int i = 0; i < 5; i++) {
        printf("%d ",p[i]);
    }
    
    printf("\n");
    
    //用指针的写法
    for (int i = 0; i < 5; i++) {
        printf("%d ",*(p+i)); //方法一
        //printf("%d ",*p++);//方法二
    }
    
    return;
}

int main(int argc, const char * argv[])
{
    int a[5] = {1,2,3,4,5};
    
    //printArry(<#int *a#>, <#int n#>)
    
    printArry(a, 5);
    
    
    
    return 0;
}
```

const 限定词 限定 XXX 不能改变

const int *p = &a;// const 限制的是 *p *p 就不能改变 但是 p 可以改变

int * const m = &a;// const 限定的是 m  因此 m  的值不能变 但是 *m 可以改变

//*n 和 n  都不能 被改变 因为被const 限定了
int const * const n = NULL;//NULL 是指空的意思 表示 0 但是在指针里面 0值用 NULL来表示

九、函数指针

函数指针变量定义的一般形式为:

 类型说明符 (*指针变量名)(); 
 
    其中“类型说明符”表示被指函数的返回值的类型。“(* 指针变量名)”表示 “*”后面的变量是定义的指针变量。最后的空括号表示指针变量所指的是 一个函数。


```
int max(int a,int b);
int max(int a,int b){
    if (a > b) {
        return a;
    }else
        return b;
}
int main(int argc, const char * argv[])
{
    int x = 3;
    int y = 5;
    
    int ret = max(x, y);//函数调用的方法
    
    printf("ret = %d\n",ret);
    
    /*
     
     1.函数指针的类型:    int (* )(int ,int )  盖上pmax 剩下的就是~~~~~~
     2.函数指针指向的类型: int (  )(int ,int )  
     
     */
    
    int (*pmax)();//定义一个函数指针变量
    
    pmax = max;//把被调函数的入口地址(max)赋值给该指针变量
    
    int ret1 = (*pmax)(x,y);
    
    printf("ret1 = %d\n",ret1);
    
    
    return 0;
}

另一种：
int (*p)(int ,int) = add;//p是一个指针，是一个函数指针 ，这个指针指向一个 具有两个int类型的参数 和一个int 类型的返回值的函数

ret = p(a,b);//add(a,b);

```

十、指针函数

 在Ｃ语言中允许一个函数的返回值是一个指针(即地址)，这种返回指针值的函数称为指针型函数。

定义指针型函数的一般形式为：
 类型说明符 *函数名(形参表)
 {
 函数体;
 }
 
 其中函数名之前加了“*”号表明这是一个指针型函数，即返回值是一个指针。
 类型说明符表示了返回的指针值所指向的数据类型。

如：
 int *ap(int x,int y)


```

char *day_name(int n);
char *day_name(int n){
    char *name[] = {"Illegal","Monday","Tuesday","Wednessday","Thursday","Friday","Saturday","Sunday"};//Illegal 错误的  非法的
    return ((n < 1  || n > 7) ? name[0] : name[n]);
}

int main(int argc, const char * argv[])
{
    int i;
    printf("input:\n");
    scanf("%d",&i);
    
    if (i < 0) {
        exit(1);//exit  网络编程里面的 一个 库函数 eixt(1) 表示 发生错误并退出程序 exit(0) 程序正常退出
    }
    
    printf("Day Now: %d --> %s\n",i,day_name(i));//%s  打印 字符串
    
    return 0;
}

```
指针练习：


```
int a[5] = {10,24, 56,44,77};
对于C语言来说:
 数组名 a 是数组的首元素地址
 &a 数组整个空间的地址
 int (* )[5] 数组a整个空间的地址类型
 
 &a + 1  这个 +1 加的是数组整个空间的大小


int *p = (int *)(&a + 1);//&a + 1 --> 加了  4*5 = 20字节 现在的p 它现在指向了数组的最后
    p--;//p --> p指向了 a[4];--》 p中存放的是 &a[4];
```
空指针常量：
0、0L、'\0'、3 - 3、0 * 17 （它们都是“integer constant expression”）以及 (void*)0 （tyc： 我觉得(void*)0应该算是一个空指针吧，更恰当一点）等都是空指针常量。
空指针：
 p = 0;、p = 0L;、p = '\0';、p = 3 - 3;、p = 0 * 17; 中的任何一种赋值操作之后（对于 C 来说还可以是 p = (void*)0;）， p 都成为一个空指针，

NULL 是一个标准规定的宏定义，用来表示空指针常量。 p = NULL; 来使 p 成为一个空指针。我们常见的空指针一般指向 0 地址，即空指针的内部用全 0 来表示（zero null pointer，零空指针）；也有一些系统用一些特殊的地址值或者特殊的方式表示空指针（nonzero null pointer，非零空指针）。

指针变量 p 是空指针的判断：
 if ( p == 0 ) if ( p == '\0' ) if ( p == 3 - 3 ) if ( p == NULL )  /* 使用 NULL 必须包含相应的标准库的头文件 */ if ( NULL == p ) if ( !p ) if ( p == q ) 

malloc 函数是标准 C 规定的库函数。在标准中明确规定了在其内存分配失败时返回的是一个 “null pointer”（空指针）。
0就是空指针，而不一定是“零”。
获得一个空指针：char *p = 0; if(p != 0) 

在指针上下文中 NULL 和 0 是完全等价的, 而未加修饰的 0 也完全可以接受。任何使用 NULL (跟 0 相对) 的地方都应该看作一种温和的提示, 是在使用指针; 程序员 (和编译器都) 不能依靠它来区别指针 0 和整数 0。 
