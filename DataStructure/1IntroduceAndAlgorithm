1.结构分类：线性 树形 图状 集合。

2.面向问题域，数据结构除了考虑逻辑结构外，还要考虑其上要进行的操作，两者合称为“抽象数据类型”
面向具体实现，要根据需要进行的操作选择存储结构，若元素个数固定不变只进行元素的遍历或访问则应采取顺序存储;若经常进行元素的插入或删除则通常采用链式存储结构。总之要使算法效率尽量高。

3.抽象数据类型指一个数据结构(逻辑结构)及其上的操作(数据运算)ADT= (D,S,P)。数据对象 数据关系 数据操作。

4.算法满足“有穷”性、确定性、可行性、输入、输出等特性。

5.算法代表了对问题的解决方案，而程序则是算法在计算机上的特定的实现

6.度量指标:算法运行时间主要取决于基本操作的执行次数(频度)，执行次数通常随问题规模扩大而增加, 增加越快意味着算法随问题规模的扩大,运行时间增长的也快,从而该种算法效果较差;增长越慢算法越好.故可用基本操作的频度随问题规模的增长率反映算法的效率。

7.时间复杂度：频度函数的增长率基本与函数中“关键项”(去掉低次项和常数项)的增长率相同，故可用“关键项” 反映算法效率。假设关键项为f(n)，用T(n)=O(f(n))表示算法时间增长率与f(n)增长率同阶.称O(f(n))为算法的渐近时间复杂度，简称时间复杂度。

算法1:  
```

for(isPrime=TRUE,i=2;i<n;i++)
    if(n%i==0) isPrime=FALSE; 
 F(n)=n-2;  f(n)=n;    T(n)=O(n)

```
8.个别算法的时间复杂度除与问题规模相关外，还依赖于输入的具体数据，如该例改进的冒泡排序算法，对此提出了平均时间复杂度与最坏时间复杂度的概念，计算时间复杂度通常指计算最坏时间复杂度。

9.存储资源:输入数据+程序本身+辅助空间
空间复杂度:S(n)=O(f(n))

10.一般来说，只要算法中不存在循环语句，其时间复杂度就是Ο(1)。其中Ο(log2n)、Ο(n)、 Ο(nlog2n)、Ο(n2)和Ο(n3)称为多项式时间，而Ο(2n)和Ο(n!)称为指数时间。计算机科学家普遍认为前者（即多项式时间复杂度的算法）是有效算法，把这类问题称为P（Polynomial,多项式）类问题，而把后者（即指数时间复杂度的算法）称为NP（Non-Deterministic Polynomial, 非确定多项式）问题。

11.算法的时间复杂度 图。

![](picture/01.png '算法的时间复杂度比较')

![](picture/02.png '时间复杂度由小到大')



 ![](picture/03.png '')
