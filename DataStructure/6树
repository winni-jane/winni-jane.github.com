6.1 树的定义和基本术语
结构特点:树是一个层次结构,“有且仅有一个根结点无前驱(第一层);有一或多个叶结点无后继;其余结点有唯一前驱和若干后继” 。 

递归定义:树由根结点(唯一)及该根结点的若干(零或多个)“子树”组成。不含任何结点也是树，称为空树

树的操作可递归分解成对根结点及其各子树(由根节点的孩子即子树的根标识)的操作进行,直至空.如求结点数/叶结点数/深度等

```
int NodeCount(Tree T){//递归法统计所有结点的个数
	if(T为空树)n=0;
	else n=1+NodeCount(子树1)+…+NodeCount(子树k);
	return n;    }
 int TreeDepth(Tree T){//递归法求树的深度
	if(T为空树)d=0;
	else{
	   d1=TreeDepth(子树1);…  dk=TreeDepth(子树k);
      d=max(d1,…,dk)+1;
	}
	return d;}
int LeafCount(Tree T){//递归法统计叶子结点的个数
	if(T为空树)n=0;
	else if(T只含一个根结点)n=1;
	else  n=LeafCount(子树1)+…+LeafCount(子树k);
	return n;    }


```
结点的度：结点拥有的子树数，叶子节点=终端节点。非终端节点：非叶子节点，即“树枝”。内部结点是有孩子的。

树的度是指每个节点孩子的最大数量

路径与路径长度，如A->D->J长为2，从根结点到任意结点存在唯一路径

1、 二叉树的概念

 二叉树是度不大于2的有序树(每个结点最多两棵子树,子树有左右之分)

先(根)序遍历:树非空则访问根结点,后递归地先序遍历其左子树；再递归地先序遍历其右子树；空则无操作。
中(根)序遍历:树非空则递归地中序遍历根左子树；后访问根结点,再递归地中序遍历右子树；空则无操作。{s2’-s1-s3’}
后(根)序遍历:树非空则递归地后序遍历根左子树；后递归地后序遍历右子树,再访问根结点；空则无操作{s2’-s3’-s1}
层次遍历:由上到下,由左到右,不宜递归



```

Status PreOrderTraverse(BiTree T,Status(*visit)(TElemType)){
 if(T为空树)return OK;
 else if(T不空){
    (*visit)( T的根结点 );    //s1
     PreOrderTraverse(T的左子树,(*visit));//s2
     PreOrderTraverse(T的右子树,(*visit));//s3
     return OK
  }
}


```

2.存储结构：二叉链表


```

typedef struct BiTNode { 
    TElemType      data;
    struct BiTNode  *lchild, *rchild; 
} BiTNode, *BiTree;
BiTree T;//

```
![](picture/6/1.png '')


二叉树求树深

```

int TreeDepth(Tree T){//递归法求树的深度
	if(T==NULL)d=0;
	else{
	   d1=TreeDepth(T->lchild1);d2=TreeDepth(T->rchild);
      if(d1>d2)d=d1+1;
      else d=d2+1;
	}
	return d;
}//


```

3.2操作：遍历二叉树

先(根)序遍历:树空无操作，非空则先访问根结点,后递归地先序遍历其左子树；再递归地先序遍历其右子树。
中(根)序遍历:树非空则递归地中序遍历根左子树；后访问根结点,再递归地中序遍历右子树。{s2‘-s1-s3’}
后(根)序遍历:树非空则递归地后序遍历左子树；后递归地后序遍历右子树，再访问根结点。 {s2’-s3‘-s1}

```

Status PreOrderTraverse(BiTree T,Status(*visit)(TElemType)){
 if(T){
    if( (*visit)(T->data) )                          //s1
       if( PreOrderTraverse(T->lchild,(*visit)))     //s2
          if( PreOrderTraverse(T->rchild,(*visit)))  //s3
               return OK;
    return ERROR; //只要有一次访问失败则必执行此语句
 }
 return OK; //树空时返回OK   }


```

由遍历序列确定二叉树：
先序序列+中序序列、中序序列+后序序列 可以确定。先序输出+后序输出不能确定


表达式的二叉树表示：根据后缀表达式可直接求值(不用考虑优先级)，但求后缀式过程中需用优先级。


3.3 操作:二叉链表的先序输出

```
算法思路:定义输出函数PrintElem，调用树的先序遍历函数,并将其传递给先序遍历函数中的参数visit即可,假设元素为整型
Typedef int TElemType;
Typedef ……… BiTree
Status PrintTElem(TElemType e){printf("%d ",e);return OK;}
Status PreOrderTraverse(BiTree T,Status(*visit)(TElemType)){
 if(T){
   if( (*visit)(T->data) )
     if( PreOrderTraverse(T->lchild,(*visit))  )
        if( PreOrderTraverse(T->rchild,(*visit)) )
           return OK
   return ERROR; 
 }
 else return OK;
}
void main(){BiTree T; … PreOrderTraverse(T,PrintTElem); }


```

![](picture/6/2.png '')


先序遍历的非递归实现

```
//对于任意节点P：（1）访问节点P，并将节点P入栈  
//（2）判断节点P的左孩子是否为空，若为空，则取栈顶节点并进行出栈操作，并将栈顶节点的右孩子置为当前的节点P,循环至1;若不为空，则将P的左孩子置为当前的节点P  
//（3）直到P为NULL并且栈为空，则遍历结束  
void preOrder(BinTree *root){  
    stack<BinTree *>s;  
    BinTree *p=root;  
    while(p!=NULL||!s.empty()){  
        while(p!=NULL){  
            cout<<p->data<<" ";  
            s.push(p);  
            p=p->lchild;  
        }  
        if(!s.empty()){  
            p=s.top();  
            s.pop();  
            p=p->rchild;  
        }  
  
    }  
}  


```

中序遍历的非递归实现

```

void inOrder(BinTree *root){  
    stack<BinTree*>s;  
    BinTree *p=root;  
    while(p!=NULL||!s.empty()){  
        while(p!=NULL){  
            s.push(p);  
            p=p->lchild;  
        }  
        if(!s.empty()){  
            p=s.top();  
            cout<<p->data<<" ";  
            s.pop();  
            p=p->rchild;  
        }  
    }  
}  

```

6.2.2 二叉树的性质

性质1: 在二叉树的第i层上最多有2^(i-1)个结点（i≥1）


性质2: 深度为K的二叉树最多有2^K-1个结点（K≥1）

性质3: 对于任意一棵二叉树BT，如果度为0的结点个数为n0，度为2的结点个数为n2，则n0=n2+1。

满二叉树：设深度为k,含2^k-1个结点的二叉树。结点数达最大

完全二叉树：设树中含n个结点, 它们和满二叉树中编号为1至n的结点位置上一一对应(编号规则为由上到下，从左到右）。相比满二叉树仅少“最后的”若干个，不能少中间的


完全二叉树特点:(1)叶子结点出现在最后2层
(2)对于任意结点，若其右分支下的子孙的最大层次为L,则左分支下的子孙的最大层次为L或L+1

性质4:含n个结点的完全二叉树深度为 log2n +1 （以2为底）。

性质5:若对含 n 个结点的完全二叉树从上到下且从左至右进行 1 至 n 的编号，则对完全二叉树中编号为 i 的结点：(1) 若 i=1，则该结点是二叉树的根，无双亲，否则，编号为 i/2 (下取整)的结点为其双亲结点；(2) 若 2i>n，则该结点无左孩子，否则，编号为 2i 的结点为其左孩子结点；(3) 若 2i+1>n，则该结点无右孩子，否则，编号为2i+1 的结点为其右孩子结点。

![](picture/6/3.png '')


二叉树的存储结构—顺序存储（一排一排的存储）

顺序存储结构:将二叉树映射到完全二叉树上，不存在的结点以空标记，之后用地址连续的存储单元(一维数组)依次自上而下、自左而右存储完全二叉树上的各元素.(将一般二叉树以完全二叉树形式存储),最坏情况下k个结点需2k-1个单元。空间可能浪费，但适合完全二叉树的存储，操作简单方便

```

//二叉树的静态分配顺序存储结构
#define  MAX_TREE_SIZE  100      
typedef TElemType  SqBiTree[MAX_TREE_SIZE];
//首元素存放根结点,考虑初始化及求根/左孩子/右孩子操作


```

二叉树的链式存储

```
二叉链表
typedef struct BiTNode { 
    TElemType      data;
    struct BiTNode  *lchild, *rchild; 
} BiTNode, *BiTree;
BiTree T;//如何判树空？

求双亲结点慢

```

```
三叉链表
 typedef struct TriTNode {
     struct TriTNode  *parent;
     TElemType       data;
     struct TriTNode  *lchild, *rchild; 
} TriTNode, *TriTree;


```
![](picture/6/4.png '')


6.3.2 线索链表


若经常遍历或者查找遍历时节点的前驱、后继信息则应修改二叉链表的结构以保存该顺序信息(线索),加上线索的二叉树称线索二叉树。分先序/中序/后序线索二叉树


线索二叉树的结构（中序线索二叉树）
每个节点的基础上增设两个标记位, 标记位为0(Link)代表指针存储孩子信息；标记位为1(Thread)代表指针存储线索信息，若是左指针则指向前驱，右指针则指向后继

线索二叉树存储结构定义：线索链表
```
   #define  Link      0  //标记为0代表为指向孩子的指针
   #define Thread   1  //标记为1代表为指向前驱后继的线索
  typedef enum{ Link,  Thread } PointerTag; //指针标记类型 ?

typedef struct BiThrNode {
   TElemType        data;
   struct BiThrNode  *lchild, *rchild; // 左右指针
   PointerTag     LTag, RTag;    // 指针性质Link或Thread
} BiThrNode, *BiThrTree;

线索二叉树的链式存储称为线索链表

```

![](picture/6/5.png '')

```
算法思路：p最初指向原树根,{ 设法让p指向树中第一个应访问的结点(树的第一个左孩子为空即左标记不为Link的结点); 访问p ; 只要p->RTag==Thread则令p=p->rchild并访问p。否则令p指向其右子树的根, 重复前述操作 } 直至遍历完毕(p指向头结点)            


void InOrderTraverse_Thr(BiThrTree T, 
                                         Status (*visit) (TElemType e)) {
   p = T->lchild;       // p指向根结点
   while (p != T) {     // 未遍历结束
       while (p->LTag==Link)  p=p->lchild;  //p指向第一个待访问结点
       if (!visit(p->data)) return ERROR;
       while(p->RTag==Thread&&p->rchild!=T){//只要是线索便前进
                    p = p->rchild;  
                    if (!Visit(p->data)) return ERROR;      
        }
        p = p->rchild;          //当前结点右指针非线索, p指向其右子树根
    }
}//复杂度也为O(n)，但是没有递归，不需要栈


```

操作:中序线索二叉链表的构造

思路:(1) 开辟头结点并赋初值(2)遍历原二叉树, 根据其有无孩子修改标记并适时添线索信息
(3) 最后一个结点再单独处理

```
Status InOrderThreading(BiThrTree &Thrt,BiThrTree T){
//T为原二叉树,T指向树的根结点(无头),将T中序线索化为Thrt(含头)
Thrt=malloc(BiThrTree)malloc(sizeof(BiThrNode));
if(!Thrt)exit(OVERFLOW);
Thrt->LTag=Link; Thrt->lchild=Thrt;//假设T空,后可改
Thrt->RTag=Thread;Thrt->rchild=Thrt;//假设T空,后可改
if(T){
  Thrt->lchild=T;
  pre=Thrt; InThreading(T,pre);//
  pre->RTag=Thread; pre->rchild=Thrt;//处理最后一个结点
  Thrt->rchild=pre;
 }
Return OK;   }//中序线索化


```

6.4 树和森林

1.1 树的存储结构
双亲表示法、孩子表示法、孩子-兄弟表示法

```
typedef char TElemType;
#define MAX_TREE_SIZE  100

  typedef struct PTNode {//结点结构
      TElemType  data;   int parent;//下标
   } PTNode; 

typedef struct {
     PTNode  nodes[MAX_TREE_SIZE];
     int    r, n; //根结点下标和结点个数
} PTree;


```
双亲表示法：

![](picture/6/6.png '')


1.1.1 孩子表示法1—多重链表

结点中为其每个子树附设一个指针.具体定义时各结点指针的个数可取最大,也可根据各自的度不同而不同.前者同构,实现简单；后者需动态开辟指针域,实现复杂但空间省


![](picture/6/7.png '')


1.1.2 孩子表示法2—孩子(双亲)链表表示法

链式存储与顺序存储结合,将各结点存储在一个数组中,每个数组元素附加一指针域指向结点的孩子形成的链表。若经常进行访问双亲结点的操作则可向数组元素追加双亲位置域

```
typedef struct CTNode{
     int Child; //孩子结点的下标
     struct CTNode* next;//指下一孩子
}*ChildPtr;

typedef struct {
     TElemType    data;
     int parent;     ChildPtr  firstchild; 
} CTBox;

typedef struct {
  CTBox  nodes[MAX_TREE_SIZE];
  int    n, r;     
} CTree;


```

![](picture/6/8.png '')


1.1.3 孩子-兄弟表示法

链式存储,每个结点包括数据域和两个指针域，左指针指向第一个孩子结点，右指针指向兄弟结点.又称二叉链表存储法

```

typedef struct CSNode{
     TElemType     data;
     struct CSNode  *firstchild, *nextsibling;
} CSNode, * CSTree;


```

![](picture/6/9.png '')


1.2 森林的存储结构

思路:单颗树的二叉链表存储结构中根结点的右指针必为空(孩子兄弟表示法),若要存储多颗树组成的森林，可将后一颗树的根结点看成前一颗树根结点的兄弟，即将后一颗树对应的二叉链表拼接到前一颗树根结点的右指针上，这称为森林的孩子兄弟表示法或二叉链表存储法。

![](picture/6/10.png '')


2、树、森林与二叉树的转换

以二叉链表存储结构为转换依据，将左右指针所指结点理解为左右孩子结点则得到二叉树；将左指针所指结点理解为孩子,右指针所指结点理解为当前结点的兄弟则得树或森林

树采用二叉链表存储，对树进行遍历即对二叉链表进行遍历。先序遍历二叉链表（先根结点后左子树再右子树）,对应到树上是“先根,后自左到右递归遍历各子树”,称为树的先根序遍历,代码与二叉树的先序遍历基本同,将lchild与rchild换作firstchild和nextsibling即可.

森林的先序遍历

![](picture/6/11.png '')

由树的先根和后根遍历序列确定树(的先根序列对应二叉链表的先序序列、后根序列对应二叉链表的中序序列)

由森林的先序和中序遍历序列确定森林(森林的先序序列对应二叉链表的先序序列、中序序列对应二叉链表的中序序列)（中序序列中X之前的结点构成森林的第一颗树，这些结点在先序和中序序列中的出现次序即为第一颗树的先根序列和后根序列）


求树或森林的深度的算法

```

int TorFDepth(CSTree F) {
//采用二叉链表存储结构
    if(!F)  return 0;
    else {
       h1 = TreeDepth( F->firstchild );
       h2 = TreeDepth( F->nextsibling);
           return(max(h1+1, h2));
      }
 }

//递归算法求森林叶子结点  
int leave2(Tcsnode T)  
{  
    if(T == NULL)  
        return 0;  
    if(T->lchild == NULL)  
        return leave2(T->rbrother) + 1;  
    else  
        return leave2(T->lchild) + leave2(T->rbrother);  
}  

//非递归算法求森林叶子结点(p->lchild = NULL)

```

6.5树与等价问题

6.6 赫夫曼树及其应用

![](picture/6/12.png '')


对于一组带有确定权植的叶子结点，带权路径长度最小的二叉树称为最优二叉树(如Huffman树)

构造赫夫曼树:
 (1)创建n个根结点,权值 {w1,w2,...,wn}, 得森林{T1,T2,...,Tn}；

 (2)在森林中选取根结点权值最小的两棵二叉树归并为新二叉树，新二叉树根结点权值为两权值之和；

 (3)将新二叉树加入森林，同时忽略被归并的两棵二叉树，

 (4)重复（2）和（3，至森林只有一棵二叉树。该二叉树就是哈夫曼树。



![](picture/6/13.png '')



赫夫曼树不一定唯一(若两个权值合并之后和原先权值相等的话则不唯一)!

Huffman树肯定最优,不是Huffman树也可能最优树

只要权值个数(叶结点数)大于1，Huffman树中便不存在度为1的结点。
权值个数(叶节点数)为n则Huffman树含2n-1个结点


赫夫曼树的应用--赫夫曼编码

电报对字符进行二进制编码,要满足解码唯一性且尽量短

等长编码：每个字符的编码长度相同。
假设字符集只含有4个字符A，B，C，D，可用两位二进制数编码为00，01，10，11。若现在有一段电文为：ABACCDA，则应发送二进制序列：00010010101100，总长度为14位。当接收方接收到这段电文后，将按两位一段进行译码。
这种编码的特点是译码简单且具有唯一性，但编码长度不一定是最短的

不等长编码
     频度高的字符分配相对较短的编码，频度较低的字符分配较长的编码。
     如ABACCDA，若分别为A，B，C，D分配0，00，1，01，则上述电文编码为000011010，长度为9，但该编码无法正确解码，因为无法断定前面4个0是4个A，还是2个B，即译码不唯一。原因在于A的编码是B的前缀

前缀编码:任一字符的编码都不是另一字符编码的前缀


![](picture/6/14.png '')


路径长代表字符编码长,叶子结点权值代表字符出现次数,则全文编码长度为树的带权路径长度,构造最优的前缀编码即构造最优树,如赫夫曼树


赫夫曼树对应的编码称为赫夫曼编码,是一种最优前缀编码


赫夫曼树的应用—文件压缩（字符采用Unicode编码时,一个字符占16位）


4、Huffman树和Huffman编码的存储表示

存储结构:含n个字符则赫夫曼树有2n-1个结点,个数固定,编码和解码无增删，故赫夫曼树采用动态分配的顺序存储结构.构造树时从叶子结点逐步向上走,识别字符或者说解码时从根向下走，故结点要含双亲和左右孩子下标,当然还要有权值


```

typedef struct{
  unsigned int weight;
  unsigned int   		parent,lchild,rchild;
}HTNode;
typedef HTNode *HuffmanTree;
//所有字符的Huffman编码用含n个指针的动态数组表示，每个元素指向一个字符串
typedef char **HuffmanCode;


```

求Huffamn编码的算法：


思路(1)为所有结点开辟存储空间,初始化各叶结点和分支结点；
(2) 构造Huffman树关键是逐个确定各分支结点相关信息：求出最小的两二叉树, 据此设置当前分支结点各成员的值。
(3)开辟空指针数组。开辟临时存放单个编码的数组,从各叶出发逆向寻根，每向上一步都将当前编码符记录到临时数组最后一个空位置，待到达根则临时数组中得到完整编码，后将该编码复制到指针数组的适当位置即可


```

Status HuffmanCoding(HuffmanTree &HT,HuffmanCode &HC,int *w,int n){
//n为字符数,w为权值数组,构造Huffman树HT,并求Huffman编码HC
 if(n<=1)return ERROR;
 m=2*n-1;//Huffman树的结点总数
 HT=(HuffmanTree)malloc((m+1)*sizeof(HTNode))//0单元不用,先存叶后分支
 for(p=HT+1,i=1;i<=n;++i,++p,++w)*p={*w,0,0,0};//初始化叶子,写程序要变
 for(i=n+1;i<=m;++i){ *p={0,0,0,0}; ++p; }//初始化分支结点,不确定先写0
 for(i=n+1;i<=m;++i){   //建Huffman树
   Select(HT,i-1,s1,s2);//在HT[1..i-1]中选择paren为0且权最 
                        //小的两结点，设下标分别为s1和s2
   HT[s1].parent=i;   HT[s2].parent=i;
   HT[i]={HT[s1].weight+HT[s2].weight, 0 ,s1,s2};
 }
 HC=(HuffmanCode)malloc((n+1)*sizeof(char*));//开辟n个指针,各指向一编码串
 cd=(char *)malloc(n*sizeof(char));//存编码的临时空间, 编码最长n-1
 cd[n-1]=‘\0’; //作编码结束符，书中用”\0”
 for(i=1;i<=n;++i){ //逐个叶结点求其编码
   start=n-1;
   for(f=HT[i].parent,c=i; f!=0; c=f,f=HT[f].parent)//叶到根逆向求编码
     { if(HT[f].lchild==c)cd[--start]=‘0’;  else cd[--start]=‘1’;}
   HC[i]=(char *)malloc((n-start))*sizeof(char));
   strcpy(HC[i],&cd[start]);//复制到HC的相应位置
 }
 free(cd);//在大型软件开发中释放临时空间至关重要
}//HuffmanCoding  


```

求Huffman编码方法2—正向

思路：令p(下标)从根遍历各结点,为判定向哪个方向前进将weight成员当作标记变量使用,其值代表该结点已经被走过的次数，为0则向左,为1则向右,为2则后退.每前进一步便记录下当前编码符,中间遇叶结点则得到一个编码串。最后p后退到根（双亲下标为0）


```

HC=(HuffmanCode)malloc((n+1)*sizeof(char*));//编码串指针数组
p=m; cdlen=0;//m为结点个数,p最初指向根结点;cdlen表示已求得的编码符个数
for(i=1;i<=m;++i)HT[i].weight=0;//初始化各结点访问次数为0
while(p){
   if(HT[p].weight==0){   //首次访问应向左
       HT[p].weight=1;
       if(HT[p].lchild!=0){p=HT[p].lchild;cd[cdlen++]=‘0’;} 
       else if(HT[p].lchild==0&&HT[p].rchild==0){ //p所指向叶结点 
            cd[cdlen]=‘\0’; 
            HC[p]=(char*)malloc((cdlen+1)*sizeof(char));
            strcpy(HC[p],cd);
        } 
   }
   else if(HT[p].weight==1){  //已访问过一次，应向右
       HT[p].weight=2;
       if(HT[p].rchild!=0){p=HT[p].rchild;cd[cdlen++]=‘1’;}
   } 
   else{   //当前结点已访问过2次
     HT[p].weight=0;//恢复并后退到父结点
     p=HT[p].parent; --cdlen;
   }
}//直到退到根结点的“双亲”0


```



















































