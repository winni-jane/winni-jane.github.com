插入类排序、交换类（快速排序（冒泡）属于交换类）排序、选择类排序、归并类排序、基数类排序。

排序方法的稳定性:若Ki=Kj，排序后Ri与Rj两者间是否保持原次序不变。
内部排序与外部排序:根据排序开始时所有待排记录的存放位置或者说根据排序过程中是否需要访问外存分。

排序的数据类型与存储结构定义:

```
#define MAXSIZE  20     //待排顺序表最大长度
typedef  int  KeyType;    // 关键字类型为整数类型
typedef  struct {
   KeyType   key;             // 关键字项
   InfoType  otherinfo;  // 其它数据项
} RcdType;                     // 记录类型
typedef  struct {
   RcdType    r[MAXSIZE+1]; //r[0]闲置留作它用
    int               length;                  //记录个数
} SqList; //顺序表存储,因记录元素个数固定

```

10.2 插入排序 （直接插入排序、折半插入排序、表插入排序、希尔排序）

思路:首记录自身有序,从第二个记录到最末一个,每次都将当前记录插入其前有序表中使得仍然有序。

实现:将待插入记录L.r[i]与其前有序段L.r[1..i-1]中记录从后向前比较：若L.r[i]>=L.r[i-1]则L.r[i]不需移动;否则设置哨L.r[0]=L.r[i]，先后移L.r[i-1]，对其前的元素L.r[j]只要大于哨中记录就后移。最后将哨中记录填入即可。


```
void InsertSort(SqList &L){
  for(i=2;i<=L.length; ++i){
    if( LT(L.r[i],L.r[i-1]) ) { //比较
      L.r[0]=L.r[i];//哨兵  //哨初始化,也算作移动
      L.r[i]=L.r[i-1];//移动
      for(j=i-2;LT(L.r[0],L.r[j]);--j)  //比较
           {   L.r[j+1]=L.r[j];//后移  }  //移动
      L.r[j+1]=L.r[0];//填入,也算作移动
    }
  }

```
直接插入排序的性能分析:

最好情况:待排序列按关键字非递减有序（正序）

最坏情况:待排序列按关键字非递增有序（逆序）

![](picture/10/1.png '')

时间复杂度O(n^2),平均操作次数(n^2)/4空间复杂度O(1),稳定！


2、折半插入排序

思路:因R[1..i-1]是一个按关键字有序的序列（不是说原先序列是有序的，这里是排的序），可用折半查找实现“在R[1..i-1]中的定位第一个比待插入记录大的元素”，如此实现的插入排序为折半插入排序。

![](picture/10/2.png '')

low=1,high=i-1;与中间元素比,若中间元素大则high=m-1,使得high右侧均比待插入元素大,且定位区间缩小一半;否则,low=m+1,使得low左侧均比待插入元素小或相等,区间小一半,至low<=high不成立(low=high+1)。此时,high右侧是第一个比待插入元素严格大的元素，插入位置为high+1 (实际等于low）。稳定

![](picture/10/3.png '')


```
void BInsertSort(SqList &L){
  for(i=2;i<=L.length;++i){
     L.r[0]=L.r[i];//记录待插入元素以备填入时用    
     low = 1;   high = i-1;
     while (low<=high) { 
        m=(low+high)/2;  //下取整
        if(LT(L.r[0].key,L.r[m].key))high=m-1;  
       else low=m+1;
     }
     for(j=i-1;j>=high+1;--j)L.r[j+1]=L.r[j];//后移
     L.r[high+1]=L.r[0];//填入
  }}//T(n)=n^2;稳定，但基本有序时不如直接插入排序


```

4、希尔排序(设增量序列,子序列直接用插入排序)

方法:每一趟希尔排序将记录序列分成d个子序列，分别对各子序列进行直接插入排序。最后一趟d=1时对全部记录进行直接插入排序。又称缩小增量排序

![](picture/10/4.png '')

希尔排序算法：
一趟希尔排序,增量为dk，相比普通插入排序唯增量由1变dk


```
void ShellInsert ( SqList &L, int dk ) {
//
 for ( i=dk+1; i<=L.length; ++i )//前dk个各自为一个有序块
     if ( L.r[i].key< L.r[i-dk].key){
         L.r[0] = L.r[i];            // 哨
         for (j=i-dk;  j>0&&(L.r[0].key<L.r[j].key); j-=dk)
                L.r[j+dk] = L.r[j];  //记录后移一增量
         L.r[j+dk] = L.r[0];        
      }
} 


void ShellSort(SqList &L, int dlta[],int t){
    //按增量序列dlta[0..t-1]进行希尔排序,d[t-1]必须为1
    for (k=0; k<t; ++t)  ShellInsert(L, dlta[k]);
}

```

希尔排序性能说明：

基本思想：子序列排好序后大序列基本有序，此时直接插入排序效率高, 如最后一次直接插入排序肯定比最初就对全部元素进行直接插入排序好。此外，子序列由于元素个数小，故多余的操作会比较少。
时间是d序列的函数,而d的确定尚待研究,实验O(n1.3)；不稳定

9.3 快速排序(交换类排序)

一、起泡排序
二、一趟快速排序
三、快速排序


一、冒泡排序算法Bubble Sort

思路：每一趟排序时，从首记录开始相邻两数进行比较，逆序则交换(将小的换到前头(最后序列是递增的))，如此，则每趟排序都会使当前“最大”的数“沉到末尾”，小的数逐步“上升”,无序块变小。如此至多N-1趟后排序完成,若中间某趟不进行交换则排序也完成。 

![](picture/10/5.png '')


```

void bubble_sort(int a[], int n)
{
    int i, j, temp;
    for (j = 0; j < n - 1; j++)
        for (i = 0; i < n - 1 - j; i++)
        {
            if(a[i] > a[i + 1])
            {
                temp = a[i];
                a[i] = a[i + 1];
                a[i + 1] = temp;
            }
        }
}


```

ppt上的算法


![](picture/10/6.png '')

/*i表趟数,j表较元素中的前者(从1开始),hasExchange标记有无交换*/
正序一趟即可,比较n-1次,交换0次;

逆序n-1趟,第i趟比较n-i次,交换n-i次,总比较或交换次数均n(n-1)/2,T(n)=O(n^2),S(n)=O(1),稳定

二、一趟快速排序Quick Sort

快速排序思路:将待排记录一次划分成两块,前块记录均小于后块, 再分别对两小块递归划分. 到最后块长1便有序
一趟快速排序:用L.r[low]作“枢轴”,保存该记录到L.r[0],之后low和high分别从两侧交替向中间移动:{high向左找第一个关键字小于枢轴的记录,移动到左侧low位置;再令low向右找第一个关键字大于枢轴的记录,移动到右侧high位置.如此low走过处元素均比哨小,high走过处均比哨大 },重复至low=high,左侧均小于枢轴,右侧均大于枢轴,将枢轴记录填入,完成分块


```
int Partition(SqList &L, int low, int high){
//快速排序中一次划分的算法(10.6b),返回划分位置
 L.r[0]=L.r[low];pivotkey=L.r[low].key;  //保存枢轴
 while (low<high) {//从两端交替想中间扫描
    while (high>low && L.r[high].key>=pivotkey )             		--high;//从右侧找第一个小于枢轴的记录
    L.r[low] = L.r[high] ; //将比枢轴小的记录移动到低端
    while ( low<high && L.r[low].key<=pivotkey ) 
       		++low; //从左侧找第一个大于枢轴的记录
    L.r[high] = L.r[low] ; //将比枢轴大的记录移动到高端
 }
  L.r[low]=L.r[0];//枢轴记录到位
  return low;          // 返回枢轴最后所在位置
}

```

![](picture/10/7.png '')


三、快速排序

   首先对无序的大序列进行“一次划分”，之后分别对分割所得两个小子序列“递归”进行快速排序。待快长为1时自然有序


```
void QSort (SqList &L,  int low,  int high ) {
  // 对顺序表L的子序列L.r[low..high]作快速排序
  if (low<high) {             // 块长大于1
       //对L.r[low..high]进行划分,pivotloc是枢轴最终位置
         pivotloc = Partition(L,low, high); 
         QSort(L, low, pivotloc-1); //对小块递归排序
         QSort(L, pivotloc+1, t); //对大块递归排序

  }   }


void QuickSort(SqList &L){QSort(L,1,L.length);}

```

结论: （以2为底）快速排序的平均时间复杂度为O(nlogn);（任何一种按常数比例进行划分所产生的递归树的深度都为θ（nlogn），其中每一层的代价为O(n），因而不管常数比例是什么，总的运行时间都为θ（nlogn），）平均性能在各排序算法中最优;

最坏情况运行时间为θ（n^2），且最坏情况发生在每次划分过程产生的两个区间分别包含n-1个元素和1个元素的时候。

 但递归过程中需要一个栈, 原本有序时枢轴均位于一端栈最长为n,空间复杂度最坏O(n), 此时退化为冒泡排序,最坏时间复杂度O(n^2)。平均情况下空间复杂度O(logn)，不稳定。

优化：1.三平均分区法（选用待排数组最左边、最右边和最中间的三个元素的中间值作为中轴）、2.根据分区大小调整算法（当数据集较小时，不必继续递归调用快速排序算法，而改为调用其他的对于小规模数据集处理能力较强的排序算法来完成。I）（插入排序对于这种“几乎”完成的排序数列有着接近线性的复杂度。这一改进被证明比持续使用快速排序算法要有效的多。）、3.不同的分区方案考虑（对于这种情况的一种改进办法就是将分区分为三块而不是原来的两块：一块是小于中轴值的所有元素，一块是等于中轴值的所有元素，另一块是大于中轴值的所有元素。）、4.并行的快速排序（会在实现代码中设定一个阀值，如果分区的元素数目多于该阀值的话，就创建一个新的线程来处理这个分区的排序，否则的话就进行递归调用来排序。）。

变种：随机化快排（随机选取一个元素作为主元）
 
     平衡快排（尽可能地选择一个能够代表中值的元素作为关键数据，选择这个数据的方法是取开头、结尾、中间3个数据，通过比较选出其中的中值。）

     外部快排（然后递归地对外部更小的部分，循环地对其他部分进行排序--> 缓冲区）
     三路基数快排（结合了基数排序（radix sort，如一般的字符串比较排序就是基数排序）和快排的特点，是字符串排序中比较高效的算法。）


![](picture/10/8.png '')


10.4 选择类排序

简单选择排序
树形选择排序
堆排序


1、选择排序SelectSort

思路:每趟都选择当前最小的元素交换到“无序块”的最前，共N-1趟则完成排序

![](picture/10/9.png '')

```
for(i = 1;i <= n-1;++i)
{
   min = i;
   for(j = i+1;j <=n;j++)
     {
         if(a[min]>a[j])
           { min = j; }
     }

   if(min != i)
    {
      a[min]<=>a[i];
    }
}

i:趟数或无序块首位置
min:当前最小记录下标

```

比较始终n-1+…+1=n(n-1)/2次;
移动至多 (n-1)次,最少0. T(n)=O(n^2)


2、堆排序HeapSort---堆的定义

![](picture/10/11.png '')


小顶堆对应的完全二叉树中任意结点均比其孩子小或相等；大顶堆对应的完全二叉树中任意结点均比其孩子大或相等.不满足这两个性质的完全二叉树其顺序存储序列不是堆.

小顶堆堆顶r1最小,
大顶堆堆顶r1最大,
任意子树也构成堆.

2.堆排序算法

基本思想:利用堆树每次选择出最大交换到末尾

具体方法:先建堆(大顶堆); {堆顶与当前堆尾交换 (如此则最大的记录交换到最后)；之后忽略堆尾将前n-1个记录组成的完全二叉树重新调整为大顶堆(筛选);} 如此重复n-1趟即可

关键是如何建大顶堆,如何重新调整为大顶堆

方法:比较堆顶与其两个孩子,若堆顶不是最大则将两孩子中的大者与堆顶“交换”,交换后的子树可能不再是堆，重复上述操作至最后.

不必真交换,保存堆顶,后仅需上移,堆顶在定位完成后填入一次即可

重新调整为大顶堆的算法：（除堆顶外均满足堆定义）
```
Typedef SqList HeapType;//采用顺序表存储堆序列或堆树 
Void HeapAdjust(HeapType &H,int s,int m){
//H.r[s..m]中除堆顶H.r[s]外均满足堆定义,调整H[s..m]为大顶堆
    rc=H.r[s]; //保存堆顶
    for(j=2*s;j<=m;j*=2){//j是s的左孩子,j+1是右孩子;向下筛选
        if(j<m&&H.r[j].key<H.r[j+1].key)++j;  //令j指向大孩子
        if(rc.key>=H.r[j].key)break;
        else { H.r[s]=H.r[j]; s=j; }//上移,并令s始终指向待填入位置
     }//经此循环则比rc大的均上移,s指向空出的待插入位置
     H.r[s]=rc;
 }


for(i=H.length;i>1;--i){
             //i指向当前堆尾
   H.r[1]←→H.r[i];   
   HeapAdjust(H,1,i-1);  
}//整个调整排序过程


```
调整过程如图：（已经初始化为大顶堆）


![](picture/10/12.png '')



2.2 建初始大顶堆


```
for(i=H.length/2; i>0; --i )//最后一个非叶结点到根
  HeapAdjust ( H, i, H.length );//最后一个参数可“尽量大”
不稳定！如两个5组成的堆进行排序。且间隔着比较和移动易致。


```
初建大顶堆图如下：

![](picture/10/14.png '')



最后总结的堆排序：


```
void HeapSort ( HeapType &H ) {
  // 对顺序表 H 进行堆排序
for ( i=H.length/2;   i>0;   --i )
    HeapAdjust ( H.r, i, H.length );//建初始大顶堆


for ( i=H.length; i>1; --i ) {//i指向当前堆尾
      H.r[1]←→H.r[i];     //交换      
      HeapAdjust(H, 1, i-1);  //对 H.r[1]进行筛选
    }

} // HeapSort


```

堆排序最坏时间复杂度O(nlogn),比快排好,且仅用一个记录辅助空间rc,但不稳定,建堆在正序时最慢,适合n大杂乱


![](picture/10/13.png '')


10.5 归并排序Merging Sort

归并操作：
归并操作(merge)，也叫归并算法，指的是将两个顺序序列合并成一个顺序序列的方法。
如　设有数列{6，202，100，301，38，8，1}
初始状态：6,202,100,301,38,8,1
第一次归并后：{6,202},{100,301},{8,38},{1}，比较次数：3；
第二次归并后：{6,100,202,301}，{1,8,38}，比较次数：4；
第三次归并后：{1,6,8,38,100,202,301},比较次数：4；
总的比较次数为：3+4+4=11,；
逆序数为14；

算法描述：
第一步：申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列
第二步：设定两个指针，最初位置分别为两个已经排序序列的起始位置
第三步：比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置
重复步骤3直到某一指针超出序列尾
将另一序列剩下的所有元素直接复制到合并序列尾。

（速度仅次于快速排序，为稳定排序算法，一般用于对总体无序，但是各子项相对有序的数列）


```
void Merge(RcdType SR[],RcdType &TR[],int i,int m,int n) {//将数组中两相邻有序序列SR[i..m]和SR[m+1..n]归并到有序序列TR[i..n]

for(j=m+1,k=i;i<=m&&j<=n;++k)//ijk各遍历一序列 
{   // 选择两子序列中当前小的填入TR[k]
    if(LQ(SR[i].key,SR[j].key))TR[k] =SR[i++];
    else TR[k] = SR[j++];
}
while(i<=m) TR[k++]=SR[i++];//剩余段复制到TR
while(j<=n) TR[k++]=SR[j++];//课本伪码要转化为程序

}

有序顺序表的合并时间复杂度为O(L1+L2)，稳定


```

2-路归并排序的递归实现

思路:若R[s..t]长为1则直接填入TR1即完成排序；对长为n的序列,假设稍短的都能排序,先对子列R[s..(s+t)/2（下取整）]和  R[（下取整）(s+t)/2+1..t] 排序(递归), 后调用归并函数进行归并


```
void Msort(RcdType SR[],RcdType &TR1[], int s, int t ){
   // 将SR[s..t]归并排序为TR1[s..t]，下标区间未变
  if (s= =t) TR1[s]=SR[s];
  else{
     m=(s+t)/2;
     MSort(SR, TR2, s , m);//递归排序SR[s..m]到TR2[s..m]
     MSort(SR,TR2,m+1,t);//递归排序SR[m+1..t]到TR2[m+1..t]
     Merge(TR2,TR1,s,m,t);//将TR2[s..m]与TR2[m+1..t]并入TR1[s..t]
  }
}


```
void MergeSort(SqList &L){MSort(L.r, L.r,1,L.length);}
复杂度：S(n)=O(n),T(n)=O(n*logn),稳定,用于外部排序


![](picture/10/15.png '')


10.6 基数排序Radix Sorting
基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”

例:关键字{209, 386, 768, 185, 247, 606, 230, 834, 539 }
分析:将原关键字的每位单独看作一关键字,按多关键字排序法排序，分最低位优先和最高位优先两种方法

先按“个位数”关键字排序:按个位值0, 1, …,  9 “分配” 成 10 组，之后按从 0 至 9 的顺序将它们 “收集” 在一起；

对上步结果按“十位数”关键字排序:按十位值0,1,…,9 “分配” 成 10 组,再按从0至9 的顺序将它们 “收集” 在一起；

对上步结果按“十位数”关键字排序:按十位值0,1,…,9 “分配” 成 10 组,再按从0至9 的顺序将它们 “收集” 在一起；

对上步结果按“百位数”关键字排序:进行分配和收集

基数排序不进行比较, 将原关键字看成由多个数位或字符构成的多关键字,按最低/高位优先进行分配-收集
单关键字可能的取值个数称为基数rd,如上例为10; 分配和收集的趟数d为最大原始关键字的位数，如上例为3。则链式基数排序时间复杂度O(d*(n+ rd )),空间O(rd),稳定


![](picture/10/16.png '')


![](picture/10/17.png '')


![](picture/10/18.png '')


最高位优先(Most Significant Digit first)法，简称MSD法;
最低位优先(Least Significant Digit first)法，简称LSD法;

c语言代码：


```
#include<math.h>
testBS()
{
   int a[] = {2, 343, 342, 1, 123, 43, 4343, 433, 687, 654, 3};
    int *a_p = a;
    //计算数组长度
    int size = sizeof(a) / sizeof(int);
    //基数排序
    bucketSort3(a_p, size);
    //打印排序后结果
    int i;
    for(i = 0; i < size; i++)
    {
        printf("%d\n", a[i]);
    }
    int t;
    scanf("%d", t);
}
//基数排序
void bucketSort3(int *p, intn)
{
    //获取数组中的最大数
    int maxNum = findMaxNum(p, n);
    //获取最大数的位数，次数也是再分配的次数。
    int loopTimes = getLoopTimes(maxNum);
    int i;
    //对每一位进行桶分配
    for(i = 1; i <= loopTimes; i++)
    {
        sort2(p, n, i);
    }
}
//获取数字的位数
int getLoopTimes(intnum)
{
    int count = 1;
    int temp = num / 10;
    while(temp != 0)
    {
        count++;
        temp = temp / 10;
    }
    return count;
}
//查询数组中的最大数
int findMaxNum(int *p, intn)
{
    int i;
    int max = 0;
    for(i = 0; i < n; i++)
    {
        if(*(p + i) > max)
        {
            max = *(p + i);
        }
    }
    return max;
}
//将数字分配到各自的桶中，然后按照桶的顺序输出排序结果
void sort2(int *p, int n, int loop)
{
    //建立一组桶此处的20是预设的根据实际数情况修改（此处为20列，即尾数相同的有多少个）
    int buckets[10][20] = {};
    //求桶的index的除数
    //如798个位桶index=(798/1)%10=8
    //十位桶index=(798/10)%10=9
    //百位桶index=(798/100)%10=7
    //tempNum为上式中的1、10、100
    int tempNum = (int)pow(10, loop - 1);
    int i, j;
    for(i = 0; i < n; i++)
    {
        int row_index = (*(p + i) / tempNum) % 10;
        for(j = 0; j < 20; j++)
        {
            if(buckets[row_index][j] == NULL)
            {
                buckets[row_index][j] = *(p + i);
                break;
            }
        }
    }
    //将桶中的数，倒回到原有数组中
    int k = 0;
    for(i = 0; i < 10; i++)
    {
        for(j = 0; j < 20; j++)
        {
            if(buckets[i][j] != NULL)
            {
                *(p + k) = buckets[i][j];
                buckets[i][j] = NULL;
                k++;
            }
        }
    }
}

```

![](picture/10/19.png '')


各排序方法各有优缺点,具体选择时考虑稳定性、记录大小(小则简单方法即可)、原始数据是否基本有序、关键字大小等因素。

如直接插入排序适合基本有序、n值较小时,

基数排序适合关键字较小、n较大、空间充裕、要求稳定时;

快速排序适合n大、不要求稳定、分布随机时;

堆排序适合n大、关键字分布可能有序、不要求稳定;

归并排序适合n大、关键字分布可能有序、要求稳定且内存空间充裕时

理论上可证明基于比较的排序方法可能达到的最快的时间复杂度为O(nlogn)；基数排序不是基于“比较”

第11章 外部排序

按可用内存大小,将外存中的记录文件分成若干段，依次读入各段到内存并利用内部排序方法对各段排序，排序后的段重新写入外存(通常称外存中这些有序段位为“归并段”)

对各归并段分块进行归并，逐步扩大 (记录的)有序子序列的长度，直至外存中整个记录序列按关键字有序为止


