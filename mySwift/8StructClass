
```

//类和结构体

/*
 Swift 中类和结构体有很多共同点。共同处在于：
 
 定义属性用于存储值
 定义方法用于提供功能
 定义下标操作使得可以通过下标语法来访问实例所包含的值
 定义构造器用于生成初始化值
 通过扩展以增加默认实现的功能
 实现协议以提供某种标准功能

 
 */

/*
 与结构体相比，类还有如下的附加功能：
 
 继承允许一个类继承另一个类的特征
 类型转换允许在运行时检查和解释一个类实例的类型
 析构器允许一个类实例释放任何其所被分配的资源
 引用计数允许对一个类的多次引用

 */

/*
 因此请使用UpperCamelCase这种方式来命名（如SomeClass和SomeStructure等），以便符合标准 Swift 类型的大写命名风格（如String，Int和Bool）。相反的，请使用lowerCamelCase这种方式为属性和方法命名（如framerate和incrementCount），以便和类型名区分。
 */


struct Resolution {//分辨率
    var width = 0
    var height = 0
}
class VideoMode {//视频模式
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name: String?
}

//生成实例 通过这种方式所创建的类或者结构体实例，其属性均会被初始化为默认值。
let someResolution = Resolution()
let someVideoMode = VideoMode()


//属性访问 点语法
//Swift 允许直接设置结构体属性的子属性。
//someVideoMode.resolution.width = 1280


//结构体类型的成员逐一构造器
let vga = Resolution(width:640, height: 480)

//结构体和枚举是值类型 类型被赋予给一个变量、常量或者被传递给一个函数的时候，其值会被拷贝。
//尽管hd和cinema有着相同的宽（width）和高（height），但是在幕后它们是两个完全不同的实例。
let hd = Resolution(width: 1920, height: 1080)
var cinema = hd


//类是引用类型
/*
let tenEighty = VideoMode()
tenEighty.resolution = hd
tenEighty.interlaced = true
tenEighty.name = "1080i"
tenEighty.frameRate = 25.0

let alsoTenEighty = tenEighty
alsoTenEighty.frameRate = 30.0

print("The frameRate property of tenEighty is now \(tenEighty.frameRate)")
 */
// 打印 "The frameRate property of theEighty is now 30.0"
/*
 需要注意的是tenEighty和alsoTenEighty被声明为常量而不是变量。然而你依然可以改变tenEighty.frameRate和alsoTenEighty.frameRate，因为tenEighty和alsoTenEighty这两个常量的值并未改变。它们并不“存储”这个VideoMode实例，而仅仅是对VideoMode实例的引用。所以，改变的是被引用的VideoMode的frameRate属性，而不是引用VideoMode的常量的值。
 */
//恒等运算符
//如果能够判定两个常量或者变量是否引用同一个类实例将会很有帮助 ===    !==


/*
 按照通用的准则，当符合一条或多条以下条件时，请考虑构建结构体：
 
 该数据结构的主要目的是用来封装少量相关简单数据值。
 有理由预计该数据结构的实例在被赋值或传递时，封装的数据将会被拷贝而不是被引用。
 该数据结构中储存的值类型属性，也应该被拷贝，而不是被引用。
 该数据结构不需要去继承另一个既有类型的属性或者行为。
 
在所有其它案例中，定义一个类，生成一个它的实例，并通过引用来管理和传递。实际中，这意味着绝大部分的自定义数据构造都应该是类，而非结构体。
 */

/*
 Swift 中，许多基本类型，诸如String，Array和Dictionary类型均以结构体的形式实现。这意味着被赋值给新的常量或变量，或者被传入函数或方法中时，它们的值会被拷贝。
 
 Objective-C 中NSString，NSArray和NSDictionary类型均以类的形式实现，而并非结构体。它们在被赋值或者被传入函数或方法时，不会发生值拷贝，而是传递现有实例的引用。
 */


```
