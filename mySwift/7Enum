
```

//枚举
//    Swift 中的枚举更加灵活，不必给每一个枚举成员提供一个值。如果给枚举成员提供一个值（称为“原始”值），则该值的类型可以是字符串，字符，或是一个整型值或浮点数。
//    你可以使用case关键字来定义一个新的枚举成员值。
    enum CompassPoint {
        case north
        case south
        case east
        case west
    }

    //    多个成员值可以出现在同一行上，用逗号隔开：enum Planet {
//    case mercury, venus, earth, mars, jupiter, saturn, uranus, neptune
//}
    
//    像 Swift 中其他类型一样，它们的名字（例如CompassPoint和Planet）应该以一个大写字母开头。给枚举类型起一个单数名字而不是复数名字，
    
    var directionToHead = CompassPoint.west
//    一旦directionToHead被声明为CompassPoint类型，你可以使用更简短的点语法将其设置为另一个CompassPoint的值
//    directionToHead = .east


//        switch directionToHead {
//        case .north:
//            print("Lots of planets have a north")
//        case .south:
//            print("Watch out for penguins")
//        case .east:
//            print("Where the sun rises")
//        case .west:
//            print("Where the skies are blue")
//}
//
//let somePlanet = Planet.earth
//switch somePlanet {
//case .earth:
//    print("Mostly harmless")
//default:
//    print("Not a safe place for humans")
//}

//你可以定义 Swift 枚举来存储任意类型的关联值，如果需要的话，每个枚举成员的关联值类型可以各不相同。

enum Barcode {
    case upc(Int, Int, Int, Int)
    case qrCode(String)
}//定义一个名为Barcode的枚举类型，它的一个成员值是具有(Int，Int，Int，Int)类型关联值的upc，另一个成员值是具有String类型关联值的qrCode。”
var productBarcode = Barcode.upc(8, 85909, 51226, 3)
//你可以在switch的 case 分支代码中提取每个关联值作为一个常量（用let前缀）或者作为一个变量（用var前缀）来使用
//productBarcode = .qrCode("ABCDEFGHIJKLMNOP")
//switch productBarcode {
//case .upc(let numberSystem, let manufacturer, let product, let check):
//    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
//case .qrCode(let productCode):
//    print("QR code: \(productCode).")
//}
// 打印 "QR code: ABCDEFGHIJKLMNOP."
//如果一个枚举成员的所有关联值都被提取为常量，或者都被提取为变量，为了简洁，你可以只在成员名称前标注一个let或者var
//switch productBarcode {
//case let .upc(numberSystem, manufacturer, product, check):
//    print("UPC: \(numberSystem), \(manufacturer), \(product), \(check).")
//case let .qrCode(productCode):
//    print("QR code: \(productCode).")
//}
//

//原始值
//枚举成员可以被默认值（称为原始值）预填充，这些原始值的类型必须相同。
enum ASCIIControlCharacter: Character {
    case tab = "\t"
    case lineFeed = "\n"
    case carriageReturn = "\r"
}
//原始值的隐式赋值
//在使用原始值为整数或者字符串类型的枚举时，不需要显式地为每一个枚举成员设置原始值，Swift 将会自动为你赋值。

//例如，当使用整数作为原始值时，隐式赋值的值依次递增1。如果第一个枚举成员没有设置原始值，其原始值将为0。

enum Planet: Int {
    case mercury = 1, venus, earth, mars, jupiter, saturn, uranus, neptune
}

//使用枚举成员的rawValue属性可以访问该枚举成员的原始值
let earthsOrder = Planet.earth.rawValue
// earthsOrder 值为 3
//使用原始值初始化枚举实例 如果在定义枚举类型的时候使用了原始值，那么将会自动获得一个初始化方法，这个方法接收一个叫做rawValue的参数，参数类型即为原始值类型，返回值则是枚举成员或nil。
let possiblePlanet = Planet(rawValue: 7)
// possiblePlanet 类型为 Planet? 值为 Planet.uranus  可选的Planet

//递归枚举
//使用递归枚举时，编译器会插入一个间接层。你可以在枚举成员前加上indirect来表示该成员可递归。 
/*
enum ArithmeticExpression {
    case number(Int)
    indirect case addition(ArithmeticExpression, ArithmeticExpression)
    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)
}
//你也可以在枚举类型开头加上indirect关键字来表明它的所有成员都是可递归的：
indirect enum ArithmeticExpression {
    case number(Int)
    case addition(ArithmeticExpression, ArithmeticExpression)
    case multiplication(ArithmeticExpression, ArithmeticExpression)
}
//下面的代码展示了使用ArithmeticExpression这个递归枚举创建表达式(5 + 4) * 2
let five = ArithmeticExpression.number(5)
let four = ArithmeticExpression.number(4)
let sum = ArithmeticExpression.addition(five, four)
let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))

//递归函数
func evaluate(_ expression: ArithmeticExpression) -> Int {
    switch expression {
    case let .number(value):
        return value
    case let .addition(left, right):
        return evaluate(left) + evaluate(right)
    case let .multiplication(left, right):
        return evaluate(left) * evaluate(right)
    }
}

print(evaluate(product))

*/


```
