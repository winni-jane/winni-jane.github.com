      //1.字符串和字符：
    //初始化空字符串
    var emptyString = ""
    // 空字符串字面量
    var anotherEmptyString = String()  // 初始化方法
    // 两个字符串均为空并等价。
        emptyString = "123"
        anotherEmptyString = "456"
        print(anotherEmptyString) //"456"
    if emptyString.isEmpty {
    print("Nothing to see here")
    
    }
    //字符
    for character in "Dog!🐶".characters {
    print(character)
    }

//    字符串可以通过传递一个值类型为Character的数组作为自变量来初始化：
    let catCharacters: [Character] = ["C", "a", "t", "!", "🐱"]
    let catString = String(catCharacters)
    print(catString) //"Cat!🐱"
    
//        连接字符串和字符
        let string1 = "hello"
        let string2 = " there"
        var welcome = string1 + string2
        // welcome 现在等于 "hello there"
        
        
//    您可以用append()方法将一个字符附加到一个字符串变量的尾部
        let exclamationMark: Character = "!"
        welcome.append(exclamationMark)
        // welcome 现在等于 "hello there!"
        
//        字符串插值
        let multiplier = 3
        let message = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)"
        // message 是 "3 times 2.5 is 7.5"
        
        
        
        
    let unusualMenagerie = "Koala 🐨, Snail 🐌, Penguin 🐧, Dromedary 🐪"
    print("unusualMenagerie has \(unusualMenagerie.characters.count) characters")//计算字符数量 另外需要注意的是通过characters属性返回的字符数量并不总是与包含相同字符的NSString的length属性相同 NSString 的 length 属性是利用 UTF-16 表示的十六位代码单元数字，而不是 Unicode 可扩展的字符群集。
    
//        字符串索引
//        每一个 String 值都有一个关联的索引（index）类型，String.Index，它对应着字符串中的每一个 Character 的位置。使用 startIndex 属性可以获取一个 String 的第一个 Character 的索引。使用 endIndex 属性可以获取最后一个 Character 的后一个位置的索引。因此，endIndex 属性不能作为一个字符串的有效下标。如果 String 是空串，startIndex 和 endIndex 是相等的。
        
        let greeting = "Guten Tag!"
        greeting[greeting.startIndex]  // G
        greeting[greeting.index(before: greeting.endIndex)]  // !
        greeting[greeting.index(after: greeting.startIndex)]  // u
        let index = greeting.index(greeting.startIndex, offsetBy: 7)
        greeting[index]  // a
    
//    使用 characters 属性的 indices 属性会创建一个包含全部索引的范围(Range)，用来在一个字符串中访问单个字符。
        for index in greeting.characters.indices {
            print("\(greeting[index]) ", terminator: "")
        }
        // 打印输出 "G u t e n   T a g ! "
        
//        插入和删除
        var welcome1 = "hello"
        welcome1.insert("!", at: welcome1.endIndex)
        // welcome1 变量现在等于 "hello!"
        
        welcome1.insert(contentsOf:" there".characters, at: welcome1.index(before: welcome1.endIndex))
        // welcome1 变量现在等于 "hello there!"
        
        welcome1.remove(at: welcome1.index(before: welcome1.endIndex))
        // welcome1 现在等于 "hello there"
        
        let range = welcome.index(welcome1.endIndex, offsetBy: -6)..<welcome1.endIndex
        welcome1.removeSubrange(range)
        // welcome1 现在等于 "hello"
        
//        hasPrefix(_:)和hasSuffix(_:)方法都是在每个字符串中逐字符比较其可扩展的字符群集是否标准相等，
        //当你从字符串中获取一个子字符串 —— 例如，使用下标或者 prefix(_:) 之类的方法 —— 就可以得到一个 SubString 的实例. wift 里的 SubString 绝大部分函数都跟 String 一样，意味着你可以使用同样的方式去操作 SubString 和 String。然而，跟 String 不同的是，你只有在短时间内需要操作字符串时，才会使用 SubString。当你需要长时间保存结果时，就把 SubString 转化为 String 的实例.
