   func setsSome() {
        //集合类型
        //       Swift 语言提供Arrays、Sets和Dictionaries三种基本的集合类型用来存储集合数据。数组（Arrays）是有序数据的集。集合（Sets）是无序无重复数据的集。字典（Dictionaries）是无序的键值对的集。
        //        数组存储同一类型的值  Array<Element>  Element为类型
        
        var someInts = [Int]()  //创建一个空数组
        someInts.append(3)
        someInts = []
        
        let threeDoubles = Array(repeating: 0.0, count: 3) //创建一个带有默认值的数组
        let anotherThreeDoubles = Array(repeating: 2.5, count: 3)
        // anotherThreeDoubles 被推断为 [Double]，等价于 [2.5, 2.5, 2.5]
        
        let sixDoubles = threeDoubles + anotherThreeDoubles
        // sixDoubles 被推断为 [Double]，等价于 [0.0, 0.0, 0.0, 2.5, 2.5, 2.5]
        print(sixDoubles)
        var shoppingList: [String] = ["Eggs", "Milk"] //用数组字面量构造数组 可写为var shoppingList = ["Eggs", "Milk"]
        
        //        只读属性count来获取数组中的数据项数量
        //        布尔属性isEmpty作为一个缩写形式去检查count属性是否为0
        if shoppingList.isEmpty{}
        shoppingList.append("Flour")
        shoppingList += ["Baking Powder"]
        shoppingList += ["Chocolate Spread", "Cheese", "Butter"]
        print(shoppingList) ////["Eggs", "Milk", "Flour", "Baking Powder", "Chocolate Spread", "Cheese", "Butter"]
        shoppingList[4...6] = ["Bananas", "Apples"] //利用下标来一次改变一系列数据值，即使新数据和原有数据的数量是不一样的。下面的例子把"Chocolate Spread"，"Cheese"，和"Butter"替换为"Bananas"和 "Apples"： 即由3项换为2项
        
        shoppingList.insert("Maple Syrup", at: 0)  //调用数组的insert(_:at:)方法来在某个具体索引值之前添加数据项
        
        let mapleSyrup = shoppingList.remove(at: 0) //这个方法把数组在特定索引值中存储的数据项移除并且返回这个被移除的数据项
        print(mapleSyrup) //Maple Syrup
        let apples = shoppingList.removeLast()
        print(apples) //Apples
        
        
        
        //        数组的遍历  for-in
        //        enumerated()方法 enumerated()返回一个由每一个数据项索引值和数据值组成的元组。我们可以把这个元组分解成临时常量或者变量来进行遍历：
        
        for (index, value) in shoppingList.enumerated() {
            print("Item \(String(index + 1)): \(value)")
        }
        
        /*Item 1: Eggs
        Item 2: Milk
        Item 3: Flour
        Item 4: Baking Powder
        Item 5: Bananas
        */
        //        集合(Set)用来存储相同类型并且没有确定顺序的值 当集合元素顺序不重要时或者希望确保每个元素只出现一次时可以使用集合而不是数组。
        
        var letters = Set<Character>() //特定类型的空集合
        
        letters.insert("a")
        letters = []
        
        //        用数组字面量创建集合
        var favoriteGenres: Set<String> = ["Rock", "Classical", "Hip hop"]
        
        //        只读属性count,使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0;你可以通过调用Set的insert(_:)方法来添加一个新元素;你可以通过调用Set的remove(_:)方法去删除一个元素，Set中的所有元素可以通过它的removeAll()方法删除;使用contains(_:)方法去检查Set中是否包含一个特定的值
        favoriteGenres.insert("Jazz")
        if let removedGenre = favoriteGenres.remove("Rock") {
            print("\(removedGenre)? I'm over it.") //Rock? I'm over it.
        } else {
            print("I never much cared for that.")
        }
        
        if favoriteGenres.contains("Funk") {
            print("I get up on the good foot.")
        } else {
            print("It's too funky in here.") //It's too funky in here.
        }
        
        //        for-in循环中遍历
        //        为了按照特定顺序来遍历一个Set中的值可以使用sorted()方法，它将返回一个有序数组，这个数组的元素排列顺序由操作符'<'对元素进行比较的结果来确定(字母的话 按升序 ASCII码).
        for genre in favoriteGenres.sorted() {
            print("\(genre)")
        }
        /*
         Classical
         Hip hop
         Jazz
         */
        
        //集合操作
        
        //        使用intersection(_:)方法根据两个集合中都包含的值创建的一个新的集合。
        //        使用symmetricDifference(_:)方法根据在一个集合中但不在两个集合中的值创建一个新的集合。
        //        使用union(_:)方法根据两个集合的值创建一个新的集合。
        //        使用subtracting(_:)方法根据不在该集合中的值创建一个新的集合。
        
        let oddDigits: Set = [1, 3, 5, 7, 9]
        let evenDigits: Set = [0, 2, 4, 6, 8]
        let singleDigitPrimeNumbers: Set = [2, 3, 5, 7]
        
        oddDigits.union(evenDigits).sorted()
        // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        oddDigits.intersection(evenDigits).sorted()
        // []
        oddDigits.subtracting(singleDigitPrimeNumbers).sorted()
        // [1, 9]  在前一个集合中 不在后一个集合中的
        oddDigits.symmetricDifference(singleDigitPrimeNumbers).sorted()
        // [1, 2, 9]  分别在某一集合中 但不同时在两个集合中的
        
        
        
        //        使用“是否相等”运算符(==)来判断两个集合是否包含全部相同的值。
        //        使用isSubset(of:)方法来判断一个集合中的值是否也被包含在另外一个集合中。
        //        使用isSuperset(of:)方法来判断一个集合中包含另一个集合中所有的值。
        //        使用isStrictSubset(of:)或者isStrictSuperset(of:)方法来判断一个集合是否是另外一个集合的子集合或者父集合并且两个集合并不相等。
        //        使用isDisjoint(with:)方法来判断两个集合是否不含有相同的值(是否没有交集)。
        
        let houseAnimals: Set = ["🐶", "🐱"]
        let farmAnimals: Set = ["🐮", "🐔", "🐑", "🐶", "🐱"]
        let cityAnimals: Set = ["🐦", "🐭"]
        
        houseAnimals.isSubset(of: farmAnimals)
        // true
        farmAnimals.isSuperset(of: houseAnimals)
        // true
        farmAnimals.isDisjoint(with: cityAnimals)
        // true
        
        
        
        //字典  字典是一种存储多个相同类型的值的容器
        //        Swift 的字典使用Dictionary<Key, Value>定义，其中Key是字典中键的数据类型，Value是字典中对应于这些键所存储值的数据类型。
        
        
        //创建一个空字典
        var namesOfIntegers = [Int: String]()
        namesOfIntegers[16] = "sixteen"
        // namesOfIntegers 现在包含一个键值对
        namesOfIntegers = [:]
        // namesOfIntegers 又成为了一个 [Int: String] 类型的空字典
        
        //用字典字面量创建字典
        var airports: [String: String] = ["YYZ": "Toronto Pearson", "DUB": "Dublin"]
        
        
        //        和数组一样，我们可以通过字典的只读属性count来获取某个字典的数据项数量;使用布尔属性isEmpty作为一个缩写形式去检查count属性是否为0;
        
        airports["LHR"] = "London"
        //updateValue(_:forKey:)这个方法返回更新值之前的原值。
        if let oldValue = airports.updateValue("Dublin Airport", forKey: "DUB") {
            print("The old value for DUB was \(oldValue).")
        } //The old value for DUB was Dublin.
        
        if let airportName = airports["DUB"] {
            print("The name of the airport is \(airportName).")
        } //The name of the airport is Dublin Airport.
        
        airports["APL"] = "Apple Internation"
        // "Apple Internation" 不是真的 APL 机场, 删除它
        airports["APL"] = nil
        // APL 现在被移除了
        //        此外，removeValue(forKey:)方法也可以用来在字典中移除键值对。这个方法在键值对存在的情况下会移除该键值对并且返回被移除的值或者在没有值的情况下返回nil
        
        if let removedValue = airports.removeValue(forKey: "DUB") {
            print("The removed airport's name is \(removedValue).")
        } else {
            print("The airports dictionary does not contain a value for DUB.")
        }
        //The removed airport's name is Dublin Airport.
        //        for-in循环来遍历
        for (airportCode, airportName) in airports {
            print("\(airportCode): \(airportName)")
        }
        
        //        通过访问keys或者values属性，我们也可以遍历字典的键或者值
        for airportCode in airports.keys {
            print("Airport code: \(airportCode)")
        }
        for airportName in airports.values {
            print("Airport name: \(airportName)")
        }
        
        
        //        如果我们只是需要使用某个字典的键集合或者值集合来作为某个接受Array实例的 API 的参数，可以直接使用keys或者values属性构造一个新数组
        let airportCodes = [String](airports.keys)
        // airportCodes 是 ["YYZ", "LHR"]
        
        let airportNames = [String](airports.values)
        // airportNames 是 ["Toronto Pearson", "London Heathrow"]
    }
        
        
        
