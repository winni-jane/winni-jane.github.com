//函数
    func setsSome() {
        
        func greet(person: String) -> String {
            let greeting = "Hello, " + person + "!"
            return greeting
        }
        print(greet(person: "Brian"))
        
        //无参数函数
        func sayHelloWorld() -> String {
            return "hello, world"
        }
        print(sayHelloWorld())
        
        //
        func printAndCount(string: String) -> Int {
            print(string)
            return string.count
        }
        func printWithoutCounting(string: String) {
            let _ = printAndCount(string: string)
        }
        
        //多重返回值函数
        func minMax(array: [Int]) -> (min: Int, max: Int) {
            var currentMin = array[0]
            var currentMax = array[0]
            for value in array[1..<array.count] {
                if value < currentMin {
                    currentMin = value
                } else if value > currentMax {
                    currentMax = value
                }
            }
            return (currentMin, currentMax)
        }
        
        //可选元组返回类型  可选元组，例如 (Int, Int)? 或 (String, Int, Bool)?
        //注意 可选元组类型如 (Int, Int)? 与元组包含可选类型如 (Int?, Int?) 是不同的.可选的元组类型，整个元组是可选的，而不只是元组中的每个元素值。
        func minMax2(array: [Int]) -> (min: Int, max: Int)? {
            if array.isEmpty { return nil }
            var currentMin = array[0]
            var currentMax = array[0]
            for value in array[1..<array.count] {
                if value < currentMin {
                    currentMin = value
                } else if value > currentMax {
                    currentMax = value
                }
            }
            return (currentMin, currentMax)
        }
        //忽略参数标签
        
        //        如果你不希望为某个参数添加一个标签，可以使用一个下划线(_)来代替一个明确的参数标签。
        //        func someFunction(_ firstParameterName: Int, secondParameterName: Int) {
        //            // 在函数体内，firstParameterName 和 secondParameterName 代表参数中的第一个和第二个参数值
        //        }
        //
        //        someFunction(1, secondParameterName: 2)
        
        //默认参数值
        func someFunction(parameterWithoutDefault: Int, parameterWithDefault: Int = 12) {
            // 如果你在调用时候不传第二个参数，parameterWithDefault 会值为 12 传入到函数体中。
        }
        someFunction(parameterWithoutDefault: 3, parameterWithDefault: 6) // parameterWithDefault = 6
        someFunction(parameterWithoutDefault: 4) // parameterWithDefault = 12
        
        
        //可变参数
        
        //        一个可变参数（variadic parameter）可以接受零个或多个值。函数调用时，你可以用可变参数来指定函数参数可以被传入不确定数量的输入值。通过在变量类型名后面加入（...）的方式来定义可变参数。 一个函数最多只能拥有一个可变参数。
        
        func arithmeticMean(_ numbers: Double...) -> Double {
            var total: Double = 0
            for number in numbers {
                total += number
            }
            return total / Double(numbers.count)
        }
                arithmeticMean(1, 2, 3, 4, 5)
        
        //输入输出参数时，在参数定义前加 inout 关键字。一个输入输出参数有传入函数的值，这个值被函数修改，然后被传出函数，替换原来的值。需要在参数名前加 & 符，表示这个值可以被函数修改。
        func swapTwoInts(_ a: inout Int, _ b: inout Int) {
            let temporaryA = a
            a = b
            b = temporaryA
        }
        
        
         var someInt = 3
         var anotherInt = 107
         swapTwoInts(&someInt, &anotherInt)
         print("someInt is now \(someInt), and anotherInt is now \(anotherInt)")
         // 打印 "someInt is now 107, and anotherInt is now 3"
        
        
        
        //函数的类型是 (Int, Int) -> Int
        //() -> Void，或者叫“没有参数，并返回 Void 类型的函数”。
        func addTwoInts(_ a: Int, _ b: Int) -> Int {
            return a + b
        }
        var mathFunction: (Int, Int) -> Int = addTwoInts
        print("Result: \(mathFunction(2, 3))")
        // Prints "Result: 5"
//        函数类型作为参数类型
        func printMathResult(_ mathFunction: (Int, Int) -> Int, _ a: Int, _ b: Int) {
            print("Result: \(mathFunction(a, b))")
        }
        printMathResult(addTwoInts, 3, 5)
        // 打印 "Result: 8"
        ///函数类型作为返回类型
        func stepForward(_ input: Int) -> Int {
            return input + 1
        }
        func stepBackward(_ input: Int) -> Int {
            return input - 1
        }
        func chooseStepFunction(backward: Bool) -> (Int) -> Int {
            return backward ? stepBackward : stepForward
        }
        
        //名为 chooseStepFunction(backward:) 的函数，它的返回类型是 (Int) -> Int 类型的函数。

        
        //嵌套函数
        //到目前为止本章中你所见到的所有函数都叫全局函数（global functions），它们定义在全局域中。你也可以把函数定义在别的函数体中，称作 嵌套函数（nested functions）。
        //嵌套函数是对外界不可见的，但是可以被它们的外围函数（enclosing function）调用。一个外围函数也可以返回它的某一个嵌套函数，使得这个函数可以在其他域中被使用。
        func chooseStepFunction2(backward: Bool) -> (Int) -> Int { //外围函数
            func stepForward(input: Int) -> Int { return input + 1 }
            func stepBackward(input: Int) -> Int { return input - 1 }   //嵌套函数
            return backward ? stepBackward : stepForward
        }
        var currentValue = -4
        let moveNearerToZero = chooseStepFunction2(backward: currentValue > 0)
        // moveNearerToZero now refers to the nested stepForward() function
        while currentValue != 0 {
            print("\(currentValue)... ")
            currentValue = moveNearerToZero(currentValue)
        }
        print("zero!")
        // -4...
        // -3...
        // -2...
        // -1...
        // zero!
        
    }
